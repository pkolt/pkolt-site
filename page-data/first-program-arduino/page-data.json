{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/first-program-arduino/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Arduino\",\n  \"emoji\": \"üèãüèª\",\n  \"tags\": [\"Arduino\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0435\\u043C \\u043F\\u0440\\u043E\\u0441\\u0442\\u0443\\u044E \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0443 \\u0434\\u043B\\u044F Arduino, \\u0431\\u0443\\u0434\\u0435\\u043C \\u043C\\u0438\\u0433\\u0430\\u0442\\u044C \\u0441\\u0432\\u0435\\u0442\\u043E\\u0434\\u0438\\u043E\\u0434\\u043E\\u043C \\u043D\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435 \\u0441 \\u0438\\u043D\\u0442\\u0435\\u0440\\u0432\\u0430\\u043B\\u043E\\u043C \\u0432 1 \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\\u0443.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"// \\u0418\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u0435\\u043C 13-\\u0439 \\u043A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442 \\u0434\\u043B\\u044F \\u043F\\u043E\\u0434\\u0430\\u0447\\u0438 \\u043D\\u0430\\u043F\\u0440\\u044F\\u0436\\u0435\\u043D\\u0438\\u044F \\n// (\\u043A \\u044D\\u0442\\u043E\\u043C\\u0443 \\u043F\\u0438\\u043D\\u0443 \\u0432 Arduino \\u043F\\u0440\\u0438\\u0432\\u044F\\u0437\\u0430\\u043D \\u0441\\u0432\\u0435\\u0442\\u043E\\u0434\\u0438\\u043E\\u0434 L)\\nint LED_PIN = 13;\\n\\n// \\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0430 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u044B / \\u0438\\u043D\\u0438\\u0446\\u0438\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F \\u0443\\u0441\\u0442\\u0440\\u043E\\u0439\\u0441\\u0442\\u0432 (\\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u044F\\u0435\\u0442\\u0441\\u044F \\u043E\\u0434\\u0438\\u043D \\u0440\\u0430\\u0437)\\nvoid setup() {\\n  // 13-\\u0439 \\u043A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442 \\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u0443\\u0435\\u043C \\u0434\\u043B\\u044F \\u0432\\u044B\\u0432\\u043E\\u0434\\u0430\\n  pinMode(LED_PIN, OUTPUT);\\n  // \\u041F\\u043E\\u0434\\u0430\\u0435\\u043C \\u043D\\u0430 13-\\u0439 \\u043A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442 \\u043D\\u0430\\u043F\\u0440\\u044F\\u0436\\u0435\\u043D\\u0438\\u0435 0 \\u0412 (\\u0432\\u044B\\u043A\\u043B\\u044E\\u0447\\u0430\\u0435\\u043C \\u0441\\u0432\\u0435\\u0442\\u043E\\u0434\\u0438\\u043E\\u0434).\\n  digitalWrite(LED_PIN, LOW);\\n}\\n\\n// \\u0411\\u0435\\u0441\\u043A\\u043E\\u043D\\u0435\\u0447\\u043D\\u044B\\u0439 \\u0446\\u0438\\u043A\\u043B \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u044B\\nvoid loop() {\\n  // \\u0421\\u043D\\u0438\\u043C\\u0430\\u0435\\u043C \\u043D\\u0430\\u043F\\u0440\\u044F\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0441 13-\\u0433\\u043E \\u043A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442\\u0430\\n  int voltage = digitalRead(LED_PIN);\\n  bool isLow = voltage == LOW;\\n  if (isLow) {\\n    // \\u041F\\u043E\\u0434\\u0430\\u0442\\u044C \\u043D\\u0430\\u043F\\u0440\\u044F\\u0436\\u0435\\u043D\\u0438\\u0435 5 \\u0412 (\\u0432\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u0441\\u0432\\u0435\\u0442\\u043E\\u0434\\u0438\\u043E\\u0434)\\n    digitalWrite(LED_PIN, HIGH);\\n  } else {\\n    // \\u041F\\u043E\\u0434\\u0430\\u0442\\u044C \\u043D\\u0430\\u043F\\u0440\\u044F\\u0436\\u0435\\u043D\\u0438\\u0435 0 \\u0412 (\\u0432\\u044B\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u0441\\u0432\\u0435\\u0442\\u043E\\u0434\\u0438\\u043E\\u0434)\\n    digitalWrite(LED_PIN, LOW);\\n  }\\n\\n  // \\u0414\\u0435\\u043B\\u0430\\u0435\\u043C \\u043F\\u0430\\u0443\\u0437\\u0443 \\u0432 1000 \\u043C\\u0441 (1 \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\\u0430)\\n  delay(1000);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Arduino","tags":["Arduino"],"emoji":"üèãüèª","link":null},"fields":{"dateModified":"28th Jun 2020","slug":"/first-program-arduino/"},"tableOfContents":{},"parent":{"__typename":"File","relativePath":"first-program-arduino.md"}}},"pageContext":{"id":"82d32bb8-1465-563f-a20f-31b8851e54ba","previous":{"id":"17fcaa43-1b87-52d8-9548-e6f6bbc03fb5","frontmatter":{"title":"–ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è Arduino","tags":["Arduino"]},"fields":{"slug":"/cpp/"}},"next":{"id":"5cac9a02-8ee7-559e-a0f8-468e1b9362a0","frontmatter":{"title":"–û–±–∑–æ—Ä Arduino Uno","tags":["Arduino"]},"fields":{"slug":"/overview-arduino-uno/"}},"hasUntagged":false,"basePath":"/"}}}